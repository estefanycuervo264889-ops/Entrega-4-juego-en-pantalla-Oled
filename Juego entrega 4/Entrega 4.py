from machine import Pin, I2C, PWM
import time
import random

# Configuración hardware
i2c = I2C(0, scl=Pin(22), sda=Pin(21))
oled = None

try:
    import ssd1306
    oled = ssd1306.SSD1306_I2C(128, 64, i2c)
    print("OLED inicializado")
except Exception as e:
    print("Error OLED:", e)
    oled = None

# Botones
btn_up = Pin(32, Pin.IN, Pin.PULL_UP)    # Saltar
btn_down = Pin(33, Pin.IN, Pin.PULL_UP)  # Agacharse
btn_start = Pin(25, Pin.IN, Pin.PULL_UP)

# Buzzer
buzzer = PWM(Pin(26))
buzzer.duty_u16(0)

# Variables del juego
game_state = "MENU"
game_mode = 0
player_ground = 42
player_y = player_ground
player_velocity = 0
is_jumping = False
is_ducking = False
duck_timer = 0
gravity = 2.2
jump_strength = -14

obstacles = []
score = 0
game_time = 0
obstacle_timer = 0
game_speed = 1.5

# Variables para música del menú
last_menu_sound_time = 0
last_sad_music_time = time.ticks_ms()
current_note = 0
menu_music_playing = False
sad_music_playing = False

# SPRITE DE DEMON 8x8 PÍXELES
demon_sprite = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0xf0, 0x00, 0x07, 0xc1, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x01, 0x8f, 0xf0, 0x1c, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x01, 0x80, 0x7f, 0x70, 0x00, 0x06, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0xc2, 0x07, 0xe0, 0x00, 0x03, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x60, 0x60, 0x00, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x30, 0x1c, 0x00, 0x49, 0x00, 0x00, 0x70, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x18, 0x06, 0x00, 0x08, 0x00, 0x0f, 0x81, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x08, 0x03, 0x01, 0x00, 0x7c, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x0c, 0x01, 0x3f, 0x00, 0x7e, 0x60, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x06, 0x01, 0x7f, 0x80, 0xfe, 0x40, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x02, 0x01, 0x3f, 0x89, 0xfe, 0x40, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x03, 0x00, 0x3f, 0x91, 0xfe, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x01, 0xc0, 0x1f, 0x81, 0xf8, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x81, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x3c, 0x00, 0x00, 0x01, 0x9f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0xc0, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x3f, 0xff, 0xf0, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x1e, 0xe0, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x80, 0x00, 0x01, 0x98, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0xc0, 0x00, 0x07, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0xe0, 0x00, 0x1d, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0x98, 0x00, 0xcd, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0x8f, 0x81, 0x99, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0x4b, 0x9f, 0x19, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0x72, 0x68, 0x2c, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0x92, 0x48, 0x4c, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0xd0, 0x48, 0xdf, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x03, 0x7c, 0x09, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x01, 0xf8, 0x0b, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x60, 0x88, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x20, 0x88, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x20, 0x88, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x70, 0x88, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x60, 0x88, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x60, 0x88, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x78, 0xc8, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x3f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

]

# DEMON AGACHADO 12x4 PÍXELES
demon_ducking_sprite = [
    [0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0],
    [0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0]
]

# CRUZ ALTA (vertical) - se esquiva SALTANDO 8x16
cross_high_sprite = [
    [0,0,0,1,1,0,0,0],
    [0,0,0,1,1,0,0,0],
    [0,0,0,1,1,0,0,0],
    [0,0,0,1,1,0,0,0],
    [0,0,0,1,1,0,0,0],
    [0,0,0,1,1,0,0,0],
    [0,0,0,1,1,0,0,0],
    [1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1],
    [0,0,0,1,1,0,0,0],
    [0,0,0,1,1,0,0,0],
    [0,0,0,1,1,0,0,0],
    [0,0,0,1,1,0,0,0],
    [0,0,0,1,1,0,0,0],
    [0,0,0,1,1,0,0,0],
    [0,0,0,1,1,0,0,0]
]

# FLECHA HORIZONTAL - aparece UN POCO MÁS ARRIBA 16x8
arrow_horizontal_sprite = [
    [0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0],
    [0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0],
    [0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],
    [0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0],
    [0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0],
    [0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0]
]

# MÚSICA DEL MENÚ
imperial_march = [
    (392, 400), (392, 400), (392, 400), (311, 280), (466, 120),
    (392, 400), (311, 280), (466, 120), (392, 520),
    (587, 400), (587, 400), (587, 400), (622, 280), (466, 120),
    (369, 400), (311, 280), (466, 120), (392, 520),
    (784, 400), (392, 280), (392, 120), (784, 400), (739, 280), (698, 120),
    (659, 120), (622, 120), (659, 240), (415, 200), (554, 200),
    (523, 120), (493, 120), (466, 80), (440, 80), (466, 240),
    (311, 200), (369, 120), (392, 120), (466, 400), (392, 280),
    (466, 120), (587, 520), (392, 400), (392, 400), (392, 400),
    (311, 280), (466, 120), (392, 400), (311, 280), (466, 120),
    (392, 520), (784, 600), (739, 200), (698, 200), (659, 600),
    (622, 150), (659, 300), (523, 300), (587, 800)
]

# MÚSICA TRISTE (Game Over) - Melodía melancólica
sad_melody = [
    (262, 400), (247, 200), (233, 200), (220, 600),
    (196, 400), (185, 200), (175, 200), (165, 600),
    (156, 400), (147, 200), (139, 200), (131, 800),
    (131, 200), (139, 200), (147, 200), (156, 400),
    (175, 400), (165, 800)
]
def jump_sound():
    try:
        frequencies = [400, 600, 300, 200]
        durations = [20, 25, 25, 15]
        volumes = [20000, 15000, 18000, 10000]
        
        for freq, dur, vol in zip(frequencies, durations, volumes):
            buzzer.freq(freq)
            buzzer.duty_u16(vol)
            time.sleep_ms(dur)
        buzzer.duty_u16(0)
    except:
        pass

def duck_sound():
    try:
        buzzer.freq(150)
        buzzer.duty_u16(15000)
        time.sleep_ms(30)
        buzzer.duty_u16(0)
    except:
        pass

def game_start_sound():
    try:
        star_wars_short = [
            (392, 150), (587, 150), (523, 80), (494, 80), (440, 200)
        ]
        for freq, dur in star_wars_short:
            buzzer.freq(freq)
            buzzer.duty_u16(28000)
            time.sleep_ms(dur)
            buzzer.duty_u16(0)
            time.sleep_ms(8)
    except:
        pass

def beep(freq=800, dur=100):
    try:
        buzzer.freq(freq)
        buzzer.duty_u16(30000)
        time.sleep_ms(dur)
        buzzer.duty_u16(0)
    except:
        pass

def play_menu_music():
    global current_note, menu_music_playing
    if not menu_music_playing:
        menu_music_playing = True
        current_note = 0
    try:
        freq, dur = imperial_march[current_note]
        buzzer.freq(freq)
        buzzer.duty_u16(22000)
        time.sleep_ms(dur)
        buzzer.duty_u16(0)
        time.sleep_ms(15)
        current_note += 1
        if current_note >= len(imperial_march):
            current_note = 0
            menu_music_playing = False
    except:
        pass

def play_sad_music():
    global current_note, sad_music_playing
    if not sad_music_playing:
        sad_music_playing = True
        current_note = 0
    try:
        if current_note < len(sad_melody):
            freq, dur = sad_melody[current_note]
            buzzer.freq(freq)
            buzzer.duty_u16(18000)
            time.sleep_ms(dur)
            buzzer.duty_u16(0)
            time.sleep_ms(20)
            current_note += 1
        else:
            current_note = 0
            sad_music_playing = False
    except:
        pass


def draw_sprite(x, y, sprite):
    if not oled:
        return
    for row_idx, row in enumerate(sprite):
        for col_idx, pixel in enumerate(row):
            if pixel:
                oled.pixel(x + col_idx, y + row_idx, 1)

def draw_player():
    if oled:
        x = 10
        y = int(player_y)
        if is_ducking:
            duck_x = x - 2
            draw_sprite(duck_x, y + 4, demon_ducking_sprite)
        else:
            draw_sprite(x, y, demon_sprite)

def draw_obstacles():
    for obs in obstacles:
        if oled:
            obstacle_type = obs[3]
            if obstacle_type == "LOW":
                # Flecha UN POCO MÁS ARRIBA (player_ground - 5)
                draw_sprite(int(obs[0]), player_ground - 5, arrow_horizontal_sprite)
            else:
                base_y = player_ground + 10
                draw_sprite(int(obs[0]), base_y - 16, cross_high_sprite)

def draw_ground():
    if oled:
        ground_y = player_ground + 10
        for i in range(0, 128):
            oled.pixel(i, ground_y, 1)
            oled.pixel(i, ground_y + 1, 1)

def draw_menu():
    if oled:
        oled.fill(0)
        oled.text("DEMON GAME", 30, 5, 1)
        modes = ["CLASICO", "TIEMPO", "HARDCORE"]
        for i, mode in enumerate(modes):
            if i == game_mode:
                oled.text(">" + mode, 35, 21 + i*9, 1)
            else:
                oled.text(" " + mode, 35, 21 + i*9, 1)
        oled.text("START=JUGAR", 25, 55, 1)
        oled.show()

def draw_game():
    if oled:
        oled.fill(0)
        oled.text("S:" + str(score), 2, 2, 1)
        oled.text("T:" + str(game_time), 60, 2, 1)
        draw_ground()
        draw_player()
        draw_obstacles()
        oled.show()

def draw_game_over():
    if oled:
        oled.fill(0)
        oled.text("GAME OVER", 35, 10, 1)
        oled.text("S:" + str(score), 50, 22, 1)
        oled.text("T:" + str(game_time), 45, 32, 1)
        oled.text("START=MENU", 25, 50, 1)
        oled.show()

def handle_jump():
    global player_y, player_velocity, is_jumping, is_ducking
    if not btn_up.value() and not is_jumping and player_y >= player_ground and not is_ducking:
        is_jumping = True
        is_ducking = False
        player_velocity = jump_strength
        jump_sound()
        time.sleep(0.06)
    if is_jumping:
        player_y += player_velocity
        player_velocity += gravity
        if player_y >= player_ground:
            player_y = player_ground
            player_velocity = 0
            is_jumping = False
        if player_y < 15:
            player_y = 15
            player_velocity = 0

def handle_duck():
    global is_ducking, duck_timer
    if not btn_down.value() and not is_jumping and player_y >= player_ground:
        if not is_ducking:
            is_ducking = True
            duck_sound()
            duck_timer = 0
        duck_timer += 1
    else:
        if is_ducking:
            is_ducking = False

def spawn_obstacle():
    obstacle_type = "LOW" if random.random() < 0.3 else "HIGH"
    obstacles.append([128, player_ground + 10, 0, obstacle_type])

def update_obstacles():
    global obstacles, score, game_state, game_speed
    for obs in obstacles[:]:
        obs[0] -= int(game_speed)
        obstacle_type = obs[3]
        
        if obstacle_type == "LOW":
            # Colisión con flecha - UN POCO MÁS ARRIBA (player_ground - 5)
            if (10 < obs[0] + 16 and 10 + 12 > obs[0] and
                player_y < (player_ground - 5) + 8 and player_y + 4 > (player_ground - 5) and
                not is_ducking):
                beep(300, 200)
                game_state = "GAME_OVER"
                return
        else:
            base_y = player_ground + 10
            if (10 < obs[0] + 8 and 10 + 8 > obs[0] and
                player_y < base_y - 8 and player_y + 8 > base_y - 16 and
                not is_jumping):
                beep(300, 200)
                game_state = "GAME_OVER"
                return
        
        if obs[0] < -20:
            obstacles.remove(obs)
            score += 1
            speed_increase = 0.4 if game_mode == 0 else 0.3
            if score % 3 == 0 and game_speed < 8:
                game_speed += speed_increase

def reset_game():
    global player_y, player_velocity, is_jumping, is_ducking, obstacles, score, game_time, obstacle_timer, game_speed
    player_y = player_ground
    player_velocity = 0
    is_jumping = False
    is_ducking = False
    obstacles = []
    score = 0
    game_time = 0
    obstacle_timer = 0
    game_speed = 4 if game_mode == 0 else 3

# Bucle principal
last_time = time.ticks_ms()
last_second = time.ticks_ms()
last_menu_music_time = time.ticks_ms()
menu_music_note_delay = 0
sad_music_note_delay = 0

print("Demon Game listo! UP=Saltar, DOWN=Agacharse, START para jugar")
print("Presiona START para pausar")

while True:
    current_time = time.ticks_ms()
    delta_time = time.ticks_diff(current_time, last_time)
    
    if delta_time >= 33:
        last_time = current_time
        
        handle_jump()
        handle_duck()
            
        if not btn_start.value():
            time.sleep(0.2)
            if game_state == "MENU":
                game_state = "PLAYING"
                reset_game()
                game_start_sound()
                print(f"Juego iniciado! Modo: {game_mode}, Velocidad: {game_speed}")
            elif game_state == "PLAYING":
                game_state = "PAUSED"
                print("Juego pausado")
            elif game_state == "PAUSED":
                game_state = "PLAYING"
                print("Juego reanudado")
            elif game_state == "GAME_OVER":
                game_state = "MENU"
                sad_music_playing = False
                print("Volviendo al menu")
        
        if game_state == "MENU":
            if time.ticks_diff(current_time, last_menu_music_time) >= 7000:
                last_menu_music_time = current_time
                menu_music_playing = True
                current_note = 0
            
            if menu_music_playing:
                if time.ticks_diff(current_time, menu_music_note_delay) >= 120:
                    menu_music_note_delay = current_time
                    play_menu_music()
            
            if not btn_up.value():
                game_mode = (game_mode - 1) % 3
                beep(1200, 50)
                time.sleep(0.2)
            if not btn_down.value():
                game_mode = (game_mode + 1) % 3
                beep(1200, 50)
                time.sleep(0.2)
            
            draw_menu()
            
        elif game_state == "PLAYING":
            if menu_music_playing:
                menu_music_playing = False
                buzzer.duty_u16(0)
            
            if time.ticks_diff(current_time, last_second) >= 1000:
                last_second = current_time
                game_time += 1
            
            obstacle_timer += 1
            base_delay = 35 if game_mode == 0 else 40
            spawn_delay = max(20, base_delay - min(game_time // 2, 25))
            if obstacle_timer >= spawn_delay:
                spawn_obstacle()
                obstacle_timer = 0
            
            update_obstacles()
            
            if game_mode == 1 and game_time >= 60:
                game_state = "GAME_OVER"
                sad_music_playing = False
                print("Tiempo agotado!")
            
            draw_game()
            
        elif game_state == "PAUSED":
            draw_game()
            if oled:
                oled.text("PAUSA", 50, 27, 1)
                oled.show()
                
        elif game_state == "GAME_OVER":
            # Reproducir música triste
            if time.ticks_diff(current_time, last_sad_music_time) >= 5000:
                last_sad_music_time = current_time
                sad_music_playing = True
                current_note = 0
            
            if sad_music_playing:
                if time.ticks_diff(current_time, sad_music_note_delay) >= 150:
                    sad_music_note_delay = current_time
                    play_sad_music()
            
            draw_game_over()
            